name: Production Deploy

on:
  push:
    branches:
      - main

env:
  ECS_CLUSTER: zennbot-ecs
  ECS_SERVICE: image-deploy

jobs:
  deploy:
    name: Build Image
    runs-on: ubuntu-latest
  
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: branch-name

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - uses: deptno/action-aws-ssm-to-dotenv@v1.3.1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ap-northeast-2
      with:
        ssm-path: /ZENNBOT/PRODUCTION
        output: .env
        decryption: true
        
    - name: Add sha to env
      run: echo -e $'\n'VERSION=${{ github.sha }} >> .env

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Image
      run: docker build -t zennbot-web .

    - name: Tag Image
      run: docker tag zennbot-web:latest 998737244507.dkr.ecr.ap-northeast-2.amazonaws.com/zennbot-web:latest

    - name: Push Image to ECR
      run: docker push 998737244507.dkr.ecr.ap-northeast-2.amazonaws.com/zennbot-web:latest

    - name: Call AWS CodeDeploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws deploy create-deployment \
          --region ap-northeast-2 \
          --application-name zennbot-deploy \
          --deployment-group-name zennbot-deploy-group \
          --github-location repository="zennvote/zennbot-server-2",commitId="${{ github.sha }}"

    - name: Send Success Message
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        DISCORD_EMBEDS: |
          [{
            "title": ":sparkles: Project Deployed! :sparkles:",
            "fields": [
              {
                "name": "Repository",
                "value": "${{ github.repository }}",
                "inline": true
              },
              {
                "name": "Branch",
                "value": "${{ steps.branch-name.outputs.branch }}",
                "inline": true
              },
              {
                "name": "Version",
                "value": "${{ github.event.after }}",
                "inline": false
              }
            ],
            "footer": {
              "text": "commit by ${{ github.actor }}",
              "icon_url": "${{ github.event.sender.avatar_url }}"
            }
          }]
      uses: Ilshidur/action-discord@master

    - name: Send Fail Message
      if: failure()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        DISCORD_EMBEDS: |
          [{
            "title": ":octagonal_sign: Project Deploy Failed! :octagonal_sign:",
            "description": "Check it: https://github.com/${{ github.repository }}/actions",
            "fields": [
              {
                "name": "Repository",
                "value": "${{ github.repository }}",
                "inline": true
              },
              {
                "name": "Branch",
                "value": "${{ steps.branch-name.outputs.branch }}",
                "inline": true
              },
              {
                "name": "Version",
                "value": "${{ github.event.after }}",
                "inline": false
              }
            ],
            "footer": {
              "text": "commit by ${{ github.actor }}",
              "icon_url": "${{ github.event.sender.avatar_url }}"
            }
          }]
      uses: Ilshidur/action-discord@master
  
  coverage:
    name: Calculate Coverage
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependancy
      run: yarn

    - name: Run test and make coverage
      run: yarn test:cov

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage/coverage-final.json